#!/usr/bin/env python3
"""
Script para verificar el estado de las dependencias del sistema Tigo RAG
"""

import sys
import subprocess

def check_package(package_name):
    """Verificar si un paquete est√° instalado"""
    try:
        __import__(package_name)
        print(f"‚úÖ {package_name}: INSTALADO")
        return True
    except ImportError:
        print(f"‚ùå {package_name}: NO ENCONTRADO")
        return False

def install_package(package):
    """Instalar paquete usando pip"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        return True
    except subprocess.CalledProcessError:
        return False

def main():
    print("üîç Verificando dependencias del sistema Tigo RAG...")
    print("=" * 60)
    
    # Lista de paquetes cr√≠ticos para el funcionamiento b√°sico
    critical_packages = [
        ("fastapi", "fastapi"),
        ("uvicorn", "uvicorn"),
        ("requests", "requests"),
        ("pydantic", "pydantic")
    ]
    
    # Lista de paquetes opcionales (ML y visualizaci√≥n)
    optional_packages = [
        ("numpy", "numpy"),
        ("sklearn", "scikit-learn"),
        ("PIL", "Pillow")
    ]
    
    print("\nüì¶ DEPENDENCIAS CR√çTICAS:")
    critical_missing = []
    for display_name, import_name in critical_packages:
        if not check_package(import_name):
            critical_missing.append(display_name)
    
    print("\nüìä DEPENDENCIAS OPCIONALES:")
    optional_missing = []
    for display_name, import_name in optional_packages:
        if not check_package(import_name):
            optional_missing.append(display_name)
    
    print("\n" + "=" * 60)
    
    if critical_missing:
        print("‚ùå DEPENDENCIAS CR√çTICAS FALTANTES:")
        for pkg in critical_missing:
            print(f"   - {pkg}")
        print("\nüîß Intentando instalar dependencias cr√≠ticas...")
        
        for pkg in critical_missing:
            print(f"   Instalando {pkg}...")
            if install_package(pkg):
                print(f"   ‚úÖ {pkg} instalado")
            else:
                print(f"   ‚ùå Error instalando {pkg}")
    else:
        print("‚úÖ TODAS LAS DEPENDENCIAS CR√çTICAS EST√ÅN DISPONIBLES")
    
    if optional_missing:
        print(f"\n‚ö†Ô∏è  DEPENDENCIAS OPCIONALES FALTANTES: {len(optional_missing)}")
        print("   (El sistema puede funcionar sin estas dependencias)")
        for pkg in optional_missing:
            print(f"   - {pkg}")
    else:
        print("‚úÖ TODAS LAS DEPENDENCIAS OPCIONALES EST√ÅN DISPONIBLES")
    
    # Verificar configuraci√≥n
    print("\nüîß VERIFICANDO CONFIGURACI√ìN...")
    try:
        import json
        with open("config/tigo_config.json", 'r') as f:
            config = json.load(f)
        print("‚úÖ Archivo de configuraci√≥n encontrado")
        
        # Verificar Azure OpenAI
        if config.get("azure_openai", {}).get("api_key"):
            print("‚úÖ API Key de Azure OpenAI configurada")
        else:
            print("‚ö†Ô∏è  API Key de Azure OpenAI no configurada")
            
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n: {e}")
    
    print("\nüöÄ SIGUIENTE PASO:")
    if not critical_missing:
        print("   ‚úÖ El sistema puede iniciarse!")
        print("   üíª Ejecuta: python main.py")
        print("   üß™ O prueba: python test_system.py")
    else:
        print("   ‚ùå Instala las dependencias cr√≠ticas faltantes primero")
        print("   üìù O ejecuta manualmente: pip install <paquete>")
    
    return len(critical_missing) == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)